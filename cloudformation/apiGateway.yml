AWSTemplateFormatVersion: 2010-09-09
Parameters:

  STAGE:
    Description: Stage name for the Cloudformation stack
    Type: String

  LambdaStackOutputs:
    Description: Generated stack name for LambdaStack
    Type: String

Resources:
  QuantEverestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Join ["-",[QuantEverestAPI,!Ref STAGE]]
      Description: QuantEverest API implementation
      FailOnWarnings: true

  QuantEverestAPIAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: '300'
      IdentitySource: 'method.request.header.Authorization'
      Name: 'QuantEverestUserPool'
      ProviderARNs:
        - 'arn:aws:cognito-idp:ap-southeast-2:542367334738:userpool/ap-southeast-2_YgTg0NSI0'
      RestApiId: !Ref QuantEverestAPI
      Type: 'COGNITO_USER_POOLS'

  APIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - APIadministratorPOST
      - APIadministratorOPTIONS
      - APIasxDataPOST
      - APIasxDataOPTIONS
      - APIManageS3ObjectsPOST
      - APIManageS3ObjectsOPTIONS
      - APIoptionsDataPOST
      - APIoptionsDataOPTIONS
      - APISendEmailsPOST
      - APISendEmailsOPTIONS
      - APIDynamoPOST
      - APIDynamoOPTIONS
    Properties:
      RestApiId: !Ref QuantEverestAPI

  Prod:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: !Ref STAGE
      Description: Production Stage
      RestApiId: !Ref QuantEverestAPI
      DeploymentId: !Ref APIDeployment

  APIAdministratorResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - QuantEverestAPI
        - RootResourceId
      PathPart: admin
      RestApiId: !Ref QuantEverestAPI

  APIadministratorPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref QuantEverestAPIAuthorizer
      HttpMethod: POST
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIAdministratorResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - Fn::ImportValue: !Sub '${LambdaStackOutputs}-administratorARN'
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIadministratorOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIAdministratorResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  APIasxDataResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - QuantEverestAPI
        - RootResourceId
      PathPart: asxData
      RestApiId: !Ref QuantEverestAPI

  APIasxDataPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref QuantEverestAPIAuthorizer
      HttpMethod: POST
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIasxDataResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - Fn::ImportValue: !Sub '${LambdaStackOutputs}-asxDataARN'
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIasxDataOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIasxDataResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  APIManageS3ObjectsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - QuantEverestAPI
        - RootResourceId
      PathPart: manageS3Objects
      RestApiId: !Ref QuantEverestAPI

  APIManageS3ObjectsPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref QuantEverestAPIAuthorizer
      HttpMethod: POST
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIManageS3ObjectsResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - Fn::ImportValue: !Sub '${LambdaStackOutputs}-manageS3ObjectsARN'
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIManageS3ObjectsOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIManageS3ObjectsResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  APIoptionsDataResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - QuantEverestAPI
        - RootResourceId
      PathPart: optionsData
      RestApiId: !Ref QuantEverestAPI

  APIoptionsDataPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref QuantEverestAPIAuthorizer
      HttpMethod: POST
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIoptionsDataResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - Fn::ImportValue: !Sub '${LambdaStackOutputs}-optionsDataARN'
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIoptionsDataOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIoptionsDataResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  APISendEmailsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - QuantEverestAPI
        - RootResourceId
      PathPart: sendEmails
      RestApiId: !Ref QuantEverestAPI

  APISendEmailsPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref QuantEverestAPIAuthorizer
      HttpMethod: POST
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APISendEmailsResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - Fn::ImportValue: !Sub '${LambdaStackOutputs}-sendEmailsARN'
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APISendEmailsOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APISendEmailsResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  APIDynamoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - QuantEverestAPI
        - RootResourceId
      PathPart: dynamo
      RestApiId: !Ref QuantEverestAPI

  APIDynamoPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref QuantEverestAPIAuthorizer
      HttpMethod: POST
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIDynamoResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - Fn::ImportValue: !Sub '${LambdaStackOutputs}-dynamoARN'
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIDynamoOPTIONS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref QuantEverestAPI
      ResourceId: !Ref APIDynamoResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

Outputs:
  APIEndpoint:
    Description: "API Endpoint"
    Value: !Sub "https://${QuantEverestAPI}.execute-api.ap-southeast-2.amazonaws.com/${STAGE}"